; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKInitialize:
	; >>>>> Line:	27
	; >>>>> y; 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	30
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	31
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	32
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	34
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	35
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	36
	; >>>>> YKAvailTCBList = YKTCBArray; 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	37
	; >>>>> YKTCBArray[0].prev = 0; 
	mov	word [(10+YKTCBArray)], 0
	; >>>>> Line:	38
	; >>>>> for(i = 0; i < 3 + 1; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	39
	; >>>>> YKTCBArray[i].next = &YKTCBArray[i + 1]; 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	40
	; >>>>> YKTCBArray[i + 1].prev = &YKTCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	dx, word [bp-2]
	inc	dx
	push	ax
	mov	ax, dx
	mov	cx, 12
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 10
	pop	ax
	mov	word [si], ax
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 4
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	43
	; >>>>> YKNewTask(YKIdle, (void*)&IStk[255],255); 
	mov	al, 255
	push	ax
	mov	ax, (IStk+510)
	push	ax
	mov	ax, YKIdle
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_2
	ALIGN	2
YKNewTask:
	; >>>>> Line:	48
	; >>>>> void YKNewTask(void (*task)(void), void*taskStack, unsigned char priority) { 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	52
	; >>>>> new_task->priority = priority; 
	mov	ax, word [YKAvailTCBList]
	add	word [YKAvailTCBList], 12
	mov	word [bp-6], ax
	; >>>>> Line:	52
	; >>>>> new_task->priority = priority; 
	mov	si, word [bp-6]
	add	si, 4
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	53
	; >>>>> new_task->sta 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	54
	; >>>>> new_task->sp = taskStack; 
	mov	si, word [bp-6]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	55
	; >>>>> new_task->delay = 0; 
	mov	si, word [bp-6]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	56
	; >>>>> YKRdyList = queue(YKRdyList,new_task); 
	push	word [bp-6]
	push	word [YKRdyList]
	call	queue
	add	sp, 4
	mov	word [YKRdyList], ax
	; >>>>> Line:	57
	; >>>>> ip = (int) task & 0xFFFF; 
	mov	ax, word [bp+4]
	and	ax, 65535
	mov	word [bp-2], ax
	; >>>>> Line:	58
	; >>>>> sp = (int) taskStack & 0xFFFF; 
	mov	ax, word [bp+6]
	and	ax, 65535
	mov	word [bp-4], ax
	; >>>>> Line:	59
	; >>>>> initStack(ip,sp); 
	push	word [bp-4]
	push	word [bp-2]
	call	initStack
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_9
	ALIGN	2
YKRun:
	; >>>>> Line:	71
	; >>>>> void YKRun() { 
	jmp	L_yakc_11
L_yakc_12:
	; >>>>> Line:	72
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_11:
	push	bp
	mov	bp, sp
	jmp	L_yakc_12
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	75
	; >>>>> void YKDelayTask(int count) { 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	79
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	81
	; >>>>> void YKEnterMutex() { 
	jmp	L_yakc_17
L_yakc_18:
	; >>>>> Line:	85
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_17:
	push	bp
	mov	bp, sp
	jmp	L_yakc_18
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	87
	; >>>>> void YKExitMutex() { 
	jmp	L_yakc_20
L_yakc_21:
	; >>>>> Line:	91
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_20:
	push	bp
	mov	bp, sp
	jmp	L_yakc_21
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	94
	; >>>>> void YKEnterISR() { 
	jmp	L_yakc_23
L_yakc_24:
	; >>>>> Line:	96
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_23:
	push	bp
	mov	bp, sp
	jmp	L_yakc_24
	ALIGN	2
YKExitISR:
	; >>>>> Line:	98
	; >>>>> void YKExitISR() { 
	jmp	L_yakc_26
L_yakc_27:
	; >>>>> Line:	100
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_26:
	push	bp
	mov	bp, sp
	jmp	L_yakc_27
	ALIGN	2
YKScheduler:
	; >>>>> Line:	103
	; >>>>> void YKScheduler() { 
	jmp	L_yakc_29
L_yakc_30:
	; >>>>> Line:	105
	; >>>>> YKDispatcher(next); 
	push	word [YKRdyList]
	call	dequeue
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	105
	; >>>>> YKDispatcher(next); 
	push	word [bp-2]
	call	YKDispatcher
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_29:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_30
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	109
	; >>>>> void YKDispatcher(TCBptr next) { 
	jmp	L_yakc_32
L_yakc_33:
	; >>>>> Line:	111
	; >>>>> sp = next->sp; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	112
	; >>>>> next->sta 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	113
	; >>>>> dispatchTask(sp); 
	push	word [bp-2]
	call	dispatchTask
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_32:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_33
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	117
	; >>>>> void YKTickHandler() { 
	jmp	L_yakc_35
L_yakc_36:
	; >>>>> Line:	119
	; >>>>> YKSuspList->delay = YKSuspList->delay - 1; 
	mov	si, word [YKSuspList]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [YKSuspList]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	120
	; >>>>> if(YKSuspList->delay == 0){ 
	mov	si, word [YKSuspList]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_37
	; >>>>> Line:	122
	; >>>>> YKRdyList = queue(YKRdyList,task); 
	push	word [YKSuspList]
	call	dequeue
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	122
	; >>>>> YKRdyList = queue(YKRdyList,task); 
	push	word [bp-2]
	push	word [YKRdyList]
	call	queue
	add	sp, 4
	mov	word [YKRdyList], ax
L_yakc_37:
	mov	sp, bp
	pop	bp
	ret
L_yakc_35:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_36
L_yakc_39:
	DB	"Idle geese",0
	ALIGN	2
YKIdle:
	; >>>>> Line:	126
	; >>>>> void YKIdle() { 
	jmp	L_yakc_40
L_yakc_41:
	; >>>>> Line:	128
	; >>>>> while(1) { 
	jmp	L_yakc_43
L_yakc_42:
	; >>>>> Line:	129
	; >>>>> for(i = 0; i < 500; i++) { 
	mov	word [bp-2], 0
	jmp	L_yakc_46
L_yakc_45:
	; >>>>> Line:	130
	; >>>>> printString("Idle geese"); 
	mov	ax, L_yakc_39
	push	ax
	call	printString
	add	sp, 2
L_yakc_48:
	inc	word [bp-2]
L_yakc_46:
	cmp	word [bp-2], 500
	jl	L_yakc_45
L_yakc_47:
L_yakc_43:
	jmp	L_yakc_42
L_yakc_44:
	mov	sp, bp
	pop	bp
	ret
L_yakc_40:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_41
	ALIGN	2
queue:
	; >>>>> Line:	135
	; >>>>> TCBptr queue(TCBptr queue_head, TCBptr task){ 
	jmp	L_yakc_50
L_yakc_51:
	; >>>>> Line:	136
	; >>>>> if(queue_head == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_52
	; >>>>> Line:	137
	; >>>>> return queue_head; 
	jmp	L_yakc_53
L_yakc_52:
	; >>>>> Line:	139
	; >>>>> if(queue_head->priority > task->priority){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+6]
	add	di, 4
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_yakc_54
	; >>>>> Line:	140
	; >>>>> task->next = queue_head; 
	mov	si, word [bp+6]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	141
	; >>>>> queue_head->prev = task; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	142
	; >>>>> SuspList = ta 
	mov	ax, word [bp+6]
	mov	word [bp+4], ax
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	145
	; >>>>> while(temp->next->priority < task->priority) { 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	145
	; >>>>> while(temp->next->priority < task->priority) { 
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	146
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_57:
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 4
	mov	di, word [bp+6]
	add	di, 4
	mov	al, byte [di]
	cmp	al, byte [si]
	ja	L_yakc_56
L_yakc_58:
	; >>>>> Line:	148
	; >>>>> task->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+6]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	149
	; >>>>> task->next->prev = task; 
	mov	si, word [bp+6]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	150
	; >>>>> task->prev = temp; 
	mov	si, word [bp+6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	151
	; >>>>> temp->next = task; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+6]
	mov	word [si], ax
L_yakc_55:
	; >>>>> Line:	153
	; >>>>> return queue_head; 
	mov	ax, word [bp+4]
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_50:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_51
	ALIGN	2
dequeue:
	; >>>>> Line:	156
	; >>>>> TCBptr dequeue(TCBptr queue_head){ 
	jmp	L_yakc_60
L_yakc_61:
	; >>>>> Line:	158
	; >>>>> queue_head = queue_head->next; 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	158
	; >>>>> queue_head = queue_head->next; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp+4], ax
	; >>>>> Line:	159
	; >>>>> return next; 
	mov	ax, word [bp-2]
L_yakc_62:
	mov	sp, bp
	pop	bp
	ret
L_yakc_60:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_61
	ALIGN	2
suspendTask:
	; >>>>> Line:	162
	; >>>>> void suspendTask(TCBptr task){ 
	jmp	L_yakc_64
L_yakc_65:
	; >>>>> Line:	164
	; >>>>> if(task->delay < YKSuspList->delay){ 
	mov	word [bp-2], 0
	; >>>>> Line:	164
	; >>>>> if(task->delay < YKSuspList->delay){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [YKSuspList]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_66
	; >>>>> Line:	165
	; >>>>> YKSuspList->delay -= task->delay; 
	mov	si, word [YKSuspList]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
	; >>>>> Line:	166
	; >>>>> YKSuspList = ta 
	mov	ax, word [bp+4]
	mov	word [YKSuspList], ax
	jmp	L_yakc_67
L_yakc_66:
	; >>>>> Line:	170
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	171
	; >>>>> while(temp->next != 0 && temp->delay < task->delay){ 
	jmp	L_yakc_69
L_yakc_68:
	; >>>>> Line:	172
	; >>>>> task->delay -= temp->delay; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
	; >>>>> Line:	173
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_69:
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_71
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_68
L_yakc_71:
L_yakc_70:
	; >>>>> Line:	175
	; >>>>> if(temp->delay < task->delay) { 
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_72
	; >>>>> Line:	176
	; >>>>> task->delay -= temp->delay; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
	; >>>>> Line:	177
	; >>>>> temp->next = task; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	178
	; >>>>> task->prev = temp; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_73
L_yakc_72:
	; >>>>> Line:	180
	; >>>>> task->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	181
	; >>>>> task->next = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	182
	; >>>>> temp->prev = task; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	183
	; >>>>> temp->delay -= task->delay; 
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
L_yakc_73:
L_yakc_67:
	mov	sp, bp
	pop	bp
	ret
L_yakc_64:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_65
	ALIGN	2
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	48 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
IStk:
	TIMES	510 db 0
