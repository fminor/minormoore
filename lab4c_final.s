        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      ResetISR    ; Reset     ; Int 08h (IRQ 0)
        dd      TickISR     ; Tick      ; Int 09h (IRQ 1)
        dd      KeyboardISR ; Keyboard  ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

; ISR responsible for saving state
; ISR for Reset (Ctrl-R)
ResetISR:
	push bp
	push es
	push ds
	push di
	push si
	push dx
	push cx 
	push bx
	push ax
	call YKEnterISR
	sti
	call handleReset
	cli
	call YKExitISR
	mov al, 0x20	; Load nonspecific EOI value into register al
	out 0x20, al	; Write EOI to PIC (port 0x20)
	pop ax			;
	pop bx			;
	pop cx			;
	pop dx			;
	pop si			;
	pop di			;
	pop ds			;
	pop es			;
	pop bp
	iret

; ISR for Tick (Ctrl-T)
TickISR:
	push bp
	push es
	push ds
	push di
	push si
	push dx
	push cx 
	push bx
	push ax
	mov ax, word[runningTask]
;	mov [ax], sp			;this line is necessary
	mov word[ax], sp
	call YKEnterISR
	sti 
	call YKTickHandler
	cli
	call YKExitISR
	mov al, 0x20		; Load nonspecific EOI value into register al
	out 0x20, al		; Write EOI to PIC (port 0x20)
	pop ax			;
	pop bx			;
	pop cx			;
	pop dx			;
	pop si			;
	pop di			;
	pop ds			;
	pop es			;
	pop bp
	iret

; ISR for Keyboard Interrupt (Any other key)
KeyboardISR:
	push bp
	push es
	push ds
	push di
	push si
	push dx
	push cx 
	push bx
	push ax
	call YKEnterISR
	sti 
	call handleKeyboard
	cli
 	call YKExitISR
	mov al, 0x20	; Load nonspecific EOI value into register al
	out 0x20, al	; Write EOI to PIC (port 0x20)
	pop ax			;
	pop bx			;
	pop cx			;
	pop dx			;
	pop si			;
	pop di			;
	pop ds			;
	pop es			;
	pop bp
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from cInt.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
handleReset:
	; >>>>> Line:	3
	; >>>>> void handleReset(){ 
	jmp	L_cInt_1
L_cInt_2:
	; >>>>> Line:	4
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_cInt_1:
	push	bp
	mov	bp, sp
	jmp	L_cInt_2
L_cInt_4:
	DB	"Tick ",0
	ALIGN	2
handleTick:
	; >>>>> Line:	10
	; >>>>> void handleTick(){ 
	jmp	L_cInt_5
L_cInt_6:
	; >>>>> Line:	11
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	12
	; >>>>> printString("Tick "); 
	mov	ax, L_cInt_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	13
	; >>>>> printInt(YKTickNum); 
	push	word [YKTickNum]
	call	printInt
	add	sp, 2
	; >>>>> Line:	14
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	15
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	mov	sp, bp
	pop	bp
	ret
L_cInt_5:
	push	bp
	mov	bp, sp
	jmp	L_cInt_6
L_cInt_11:
	DB	"' IGNORED",0
L_cInt_10:
	DB	"KEYPRESS '",0
L_cInt_9:
	DB	"DELAY COMPLETE",0
L_cInt_8:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
handleKeyboard:
	; >>>>> Line:	19
	; >>>>> void handleKeyboard(){ 
	jmp	L_cInt_12
L_cInt_13:
	; >>>>> Line:	22
	; >>>>> if(KeyBuffer == 'd'){ 
	cmp	word [KeyBuffer], 100
	jne	L_cInt_14
	; >>>>> Line:	23
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	24
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_cInt_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	25
	; >>>>> for (i = 0; i < 5000; i++){ 
	mov	word [bp-2], 0
	jmp	L_cInt_16
L_cInt_15:
L_cInt_18:
	; >>>>> Line:	27
	; >>>>> } 
	inc	word [bp-2]
L_cInt_16:
	cmp	word [bp-2], 5000
	jl	L_cInt_15
L_cInt_17:
	; >>>>> Line:	28
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	29
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_cInt_9
	push	ax
	call	printString
	add	sp, 2
	jmp	L_cInt_19
L_cInt_14:
	; >>>>> Line:	32
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	33
	; >>>>> printString("KEYPRESS '"); 
	mov	ax, L_cInt_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	34
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	35
	; >>>>> printString("' IGNORED"); 
	mov	ax, L_cInt_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> printNewLine(); 
	call	printNewLine
L_cInt_19:
	mov	sp, bp
	pop	bp
	ret
L_cInt_12:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_cInt_13
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_yakc_1:
	DB	0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0xA,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	31
	; >>>>> void YKInitialize() { 
	jmp	L_yakc_2
L_yakc_3:
	; >>>>> Line:	34
	; >>>>> printString("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"); 
	mov	ax, L_yakc_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	35
	; >>>>> activeTasks = 0; 
	mov	word [activeTasks], 0
	; >>>>> Line:	36
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	37
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	38
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	40
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	41
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	42
	; >>>>> runningTask = 0; 
	mov	word [runningTask], 0
	; >>>>> Line:	43
	; >>>>> YKAvailTCBList = YKTCBArray; 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	44
	; >>>>> YKTCBArray[0].prev = 0; 
	mov	word [(10+YKTCBArray)], 0
	; >>>>> Line:	45
	; >>>>> for(i = 0; i < 3 - 1; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_5
L_yakc_4:
	; >>>>> Line:	46
	; >>>>> YKTCBArray[i].next = &YKTCBArray[i + 1]; 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	47
	; >>>>> YKTCBArray[i + 1].prev = &YKTCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	dx, word [bp-2]
	inc	dx
	push	ax
	mov	ax, dx
	mov	cx, 12
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 10
	pop	ax
	mov	word [si], ax
L_yakc_7:
	inc	word [bp-2]
L_yakc_5:
	cmp	word [bp-2], 2
	jl	L_yakc_4
L_yakc_6:
	; >>>>> Line:	50
	; >>>>> YKNewTask(YKIdle, (void*)&IStk[255],255); 
	mov	al, 255
	push	ax
	mov	ax, (IStk+510)
	push	ax
	mov	ax, YKIdle
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_2:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_3
L_yakc_11:
	DB	"New Stack: ",0xA,0
L_yakc_10:
	DB	"Task stack: ",0xA,0
L_yakc_9:
	DB	"Task priority: ",0xA,0
	ALIGN	2
YKNewTask:
	; >>>>> Line:	55
	; >>>>> >sp = (void*)sp 
	jmp	L_yakc_12
L_yakc_13:
	; >>>>> Line:	61
	; >>>>> activeTasks++; 
	mov	ax, word [activeTasks]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	word [bp-6], ax
	; >>>>> Line:	61
	; >>>>> activeTasks++; 
	inc	word [activeTasks]
	; >>>>> Line:	62
	; >>>>> new_task->priority = priority; 
	mov	si, word [bp-6]
	add	si, 4
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	63
	; >>>>> new_task->state = 0; 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	64
	; >>>>> new_task->delay = 0; 
	mov	si, word [bp-6]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	65
	; >>>>> YKRdyList = queue(YKRdyList,new_task); 
	push	word [bp-6]
	push	word [YKRdyList]
	call	queue
	add	sp, 4
	mov	word [YKRdyList], ax
	; >>>>> Line:	66
	; >>>>> ip = (int) task & 0xFFFF; 
	mov	ax, word [bp+4]
	and	ax, 65535
	mov	word [bp-2], ax
	; >>>>> Line:	67
	; >>>>> sp = (int) taskStack & 0xFFFF; 
	mov	ax, word [bp+6]
	and	ax, 65535
	mov	word [bp-4], ax
	; >>>>> Line:	68
	; >>>>> printString("Task priority: \n"); 
	mov	ax, L_yakc_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	69
	; >>>>> printInt(new_task->priority); 
	mov	si, word [bp-6]
	add	si, 4
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	70
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	71
	; >>>>> printString("Task stack: \n"); 
	mov	ax, L_yakc_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	72
	; >>>>> printInt(sp); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	73
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	74
	; >>>>> sp = initStack(ip,sp); 
	push	word [bp-4]
	push	word [bp-2]
	call	initStack
	add	sp, 4
	mov	word [bp-4], ax
	; >>>>> Line:	75
	; >>>>> new_task->sp = (void*)sp 
	mov	si, word [bp-6]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	76
	; >>>>> printString("New Stack: \n"); 
	mov	ax, L_yakc_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	77
	; >>>>> printInt(sp); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	78
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	86
	; >>>>> if(runningTask != 0){ 
	mov	ax, word [runningTask]
	test	ax, ax
	je	L_yakc_14
	; >>>>> Line:	87
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_14:
	mov	sp, bp
	pop	bp
	ret
L_yakc_12:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_13
	ALIGN	2
YKRun:
	; >>>>> Line:	95
	; >>>>> void YKRun() { 
	jmp	L_yakc_16
L_yakc_17:
	; >>>>> Line:	97
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_16:
	push	bp
	mov	bp, sp
	jmp	L_yakc_17
L_yakc_22:
	DB	"Delayed for: ",0
L_yakc_21:
	DB	"Top of the Suspended List: ",0
L_yakc_20:
	DB	"Delay for: ",0
L_yakc_19:
	DB	"Delayed Task: ",0
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	100
	; >>>>> void YKDelayTask(int count) { 
	jmp	L_yakc_23
L_yakc_24:
	; >>>>> Line:	102
	; >>>>> printString("Delayed Task: "); 
	mov	ax, L_yakc_19
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	103
	; >>>>> printInt(runningTask->priority); 
	mov	si, word [runningTask]
	add	si, 4
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	104
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	105
	; >>>>> runningTask->delay=count; 
	mov	si, word [runningTask]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	106
	; >>>>> printString("Delay for: "); 
	mov	ax, L_yakc_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	107
	; >>>>> printInt(runningTask->delay); 
	mov	si, word [runningTask]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	108
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	109
	; >>>>> suspendTask(runningTask); 
	push	word [runningTask]
	call	suspendTask
	add	sp, 2
	; >>>>> Line:	110
	; >>>>> printString("Top of the Suspended List: "); 
	mov	ax, L_yakc_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	111
	; >>>>> printInt(YKSuspList->priority); 
	mov	si, word [YKSuspList]
	add	si, 4
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	112
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	113
	; >>>>> printString("D 
	mov	ax, L_yakc_22
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	114
	; >>>>> printInt(YKSuspList->delay); 
	mov	si, word [YKSuspList]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	115
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	116
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_23:
	push	bp
	mov	bp, sp
	jmp	L_yakc_24
L_yakc_27:
	DB	"Context Switch",0xA,0
L_yakc_26:
	DB	0xA,"next task priority: ",0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	133
	; >>>>> void YKScheduler() { 
	jmp	L_yakc_28
L_yakc_29:
	; >>>>> Line:	139
	; >>>>> next = peak(YKRdyList); 
	push	word [YKRdyList]
	call	peak
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	163
	; >>>>> printString("\nnext task priority: "); 
	mov	ax, L_yakc_26
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	164
	; >>>>> printInt(next->priority); 
	mov	si, word [bp-2]
	add	si, 4
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	165
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	167
	; >>>>> if(runningTask != 0 && runningTask->priority != next->priority){ 
	mov	ax, word [runningTask]
	test	ax, ax
	je	L_yakc_30
	mov	si, word [runningTask]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	al, byte [di]
	cmp	al, byte [si]
	je	L_yakc_30
	; >>>>> Line:	168
	; >>>>> printString("Context Switch\n"); 
	mov	ax, L_yakc_27
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	169
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
L_yakc_30:
	; >>>>> Line:	172
	; >>>>> YKDispatcher(next); 
	push	word [bp-2]
	call	YKDispatcher
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_28:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_29
L_yakc_33:
	DB	"Stack: ",0xA,0
L_yakc_32:
	DB	"Dispatcher",0xA,0xD,0
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	177
	; >>>>> void YKDispatcher(TCBptr next) { 
	jmp	L_yakc_34
L_yakc_35:
	; >>>>> Line:	179
	; >>>>> printString("Dispatcher\n\r"); 
	mov	ax, L_yakc_32
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	180
	; >>>>> runningTask = next; 
	mov	ax, word [bp+4]
	mov	word [runningTask], ax
	; >>>>> Line:	181
	; >>>>> sp =  
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	182
	; >>>>> printString("Stack: \n"); 
	mov	ax, L_yakc_33
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	183
	; >>>>> printInt((int)sp); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	184
	; >>>>> next->state = 1; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	186
	; >>>>> dispatchTask(sp); 
	push	word [bp-2]
	call	dispatchTask
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_34:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_35
L_yakc_38:
	DB	"Top delay: ",0xA,0
L_yakc_37:
	DB	"Tick ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	190
	; >>>>> void YKTickHandler() { 
	jmp	L_yakc_39
L_yakc_40:
	; >>>>> Line:	192
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	193
	; >>>>> printString("Tick "); 
	mov	ax, L_yakc_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	194
	; >>>>> printInt(YKTickNum); 
	push	word [YKTickNum]
	call	printInt
	add	sp, 2
	; >>>>> Line:	195
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	197
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	201
	; >>>>> YKSuspList->delay = YKSuspList->delay - 1; 
	mov	si, word [YKSuspList]
	add	si, 6
	mov	ax, word [si]
	dec	ax
	mov	si, word [YKSuspList]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	202
	; >>>>> printString("Top delay: \n"); 
	mov	ax, L_yakc_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	203
	; >>>>> printInt(YKSuspList->delay); 
	mov	si, word [YKSuspList]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	204
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	205
	; >>>>> while(YKSuspList->delay == 0){ 
	jmp	L_yakc_42
L_yakc_41:
	; >>>>> Line:	207
	; >>>>> YKSuspList = task->next; 
	push	word [YKSuspList]
	call	dequeue
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	207
	; >>>>> YKSuspList = task->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	; >>>>> Line:	208
	; >>>>> task->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	209
	; >>>>> YKRdyList = queue(YKRdyList,task); 
	push	word [bp-2]
	push	word [YKRdyList]
	call	queue
	add	sp, 4
	mov	word [YKRdyList], ax
L_yakc_42:
	mov	si, word [YKSuspList]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_41
L_yakc_43:
	mov	sp, bp
	pop	bp
	ret
L_yakc_39:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_40
L_yakc_45:
	DB	"Idle geese",0xA,0
	ALIGN	2
YKIdle:
	; >>>>> Line:	213
	; >>>>> emp->next; 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	215
	; >>>>> while(1) { 
	jmp	L_yakc_49
L_yakc_48:
	; >>>>> Line:	216
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	217
	; >>>>> i = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	218
	; >>>>> i = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	219
	; >>>>> for(i = 0; i < 500; i++); 
	mov	word [bp-2], 0
	jmp	L_yakc_52
L_yakc_51:
L_yakc_54:
	inc	word [bp-2]
L_yakc_52:
	cmp	word [bp-2], 500
	jl	L_yakc_51
L_yakc_53:
	; >>>>> Line:	220
	; >>>>> printString("Idle geese\n"); 
	mov	ax, L_yakc_45
	push	ax
	call	printString
	add	sp, 2
L_yakc_49:
	jmp	L_yakc_48
L_yakc_50:
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_47
	ALIGN	2
peak:
	; >>>>> Line:	223
	; >>>>> TCBptr peak(TCBptr head){ 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	224
	; >>>>> return head; 
	mov	ax, word [bp+4]
L_yakc_58:
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	jmp	L_yakc_57
	ALIGN	2
queue:
	; >>>>> Line:	226
	; >>>>> TCBptr queue(TCBptr queue_head, TCBptr task){ 
	jmp	L_yakc_60
L_yakc_61:
	; >>>>> Line:	227
	; >>>>> if(queue_head == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_62
	; >>>>> Line:	228
	; >>>>> return task; 
	mov	ax, word [bp+6]
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	230
	; >>>>> if(queue_head->priority > task->priority){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+6]
	add	di, 4
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_yakc_64
	; >>>>> Line:	231
	; >>>>> task->next = queue_head; 
	mov	si, word [bp+6]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	232
	; >>>>> queue_head->prev = task; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	233
	; >>>>> queue_head = task; 
	mov	ax, word [bp+6]
	mov	word [bp+4], ax
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	236
	; >>>>> while(temp->next->priority < task->priority) { 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	236
	; >>>>> while(temp->next->priority < task->priority) { 
	jmp	L_yakc_67
L_yakc_66:
	; >>>>> Line:	237
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_67:
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 4
	mov	di, word [bp+6]
	add	di, 4
	mov	al, byte [di]
	cmp	al, byte [si]
	ja	L_yakc_66
L_yakc_68:
	; >>>>> Line:	239
	; >>>>> task->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+6]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	240
	; >>>>> ine 
	mov	si, word [bp+6]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	241
	; >>>>> task->prev = temp; 
	mov	si, word [bp+6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	242
	; >>>>> temp->next = task; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+6]
	mov	word [si], ax
L_yakc_65:
	; >>>>> Line:	244
	; >>>>> return queue_head; 
	mov	ax, word [bp+4]
L_yakc_63:
	mov	sp, bp
	pop	bp
	ret
L_yakc_60:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_61
	ALIGN	2
dequeue:
	; >>>>> Line:	247
	; >>>>> TCBptr dequeue(TCBptr queue_head){ 
	jmp	L_yakc_70
L_yakc_71:
	; >>>>> Line:	256
	; >>>>> return next; 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	256
	; >>>>> return next; 
	mov	ax, word [bp-2]
L_yakc_72:
	mov	sp, bp
	pop	bp
	ret
L_yakc_70:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_71
L_yakc_79:
	DB	"task to front of queue",0xA,0
L_yakc_78:
	DB	"first suspended task",0xA,0
L_yakc_77:
	DB	"Top delay: ",0
L_yakc_76:
	DB	"YKSuspList: ",0
L_yakc_75:
	DB	"task delay: ",0
L_yakc_74:
	DB	"suspend task",0xA,0
	ALIGN	2
suspendTask:
	; >>>>> Line:	259
	; >>>>> void suspendTask(TCBptr task){ 
	jmp	L_yakc_80
L_yakc_81:
	; >>>>> Line:	261
	; >>>>> printString("suspend task\n"); 
	mov	word [bp-2], 0
	; >>>>> Line:	261
	; >>>>> printString("suspend task\n"); 
	mov	ax, L_yakc_74
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	262
	; >>>>> task->state = 2; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	263
	; >>>>> printString("task delay: "); 
	mov	ax, L_yakc_75
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	264
	; >>>>> printInt(task->delay); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	265
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	266
	; >>>>> printString("YKSuspList: "); 
	mov	ax, L_yakc_76
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	267
	; >>>>> printInt((int)YKSuspList); 
	push	word [YKSuspList]
	call	printInt
	add	sp, 2
	; >>>>> Line:	268
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	269
	; >>>>> printString("Top delay: "); 
	mov	ax, L_yakc_77
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	270
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	271
	; >>>>> printInt(YKSuspList->delay); 
	mov	si, word [YKSuspList]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	272
	; >>>>> >prev = temp; 
	call	printNewLine
	; >>>>> Line:	273
	; >>>>> if(YKSuspList == 0){ 
	mov	ax, word [YKSuspList]
	test	ax, ax
	jne	L_yakc_82
	; >>>>> Line:	274
	; >>>>> printString("first suspended task\n"); 
	mov	ax, L_yakc_78
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	275
	; >>>>> YKSuspList = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspList], ax
	jmp	L_yakc_83
L_yakc_82:
	; >>>>> Line:	277
	; >>>>> else if(task->delay < YKSuspList->delay){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [YKSuspList]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_84
	; >>>>> Line:	278
	; >>>>> printString("task to front of queue\n"); 
	mov	ax, L_yakc_79
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	279
	; >>>>> YKSuspList->delay -= task->delay; 
	mov	si, word [YKSuspList]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
	; >>>>> Line:	280
	; >>>>> YKSuspList = task; 
	mov	ax, word [bp+4]
	mov	word [YKSuspList], ax
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	284
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	285
	; >>>>> while(temp->next != 0 && temp->delay < task->delay){ 
	jmp	L_yakc_87
L_yakc_86:
	; >>>>> Line:	286
	; >>>>> task->delay -= temp->delay; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
	; >>>>> Line:	287
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_87:
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_89
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_86
L_yakc_89:
L_yakc_88:
	; >>>>> Line:	289
	; >>>>> if(temp->delay < task->delay) { 
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_90
	; >>>>> Line:	290
	; >>>>> task->delay -= temp->delay; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
	; >>>>> Line:	291
	; >>>>> temp->next = task; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	292
	; >>>>> task->prev = temp; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	294
	; >>>>> task->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	295
	; >>>>> task->next = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	296
	; >>>>> temp->prev = task; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	297
	; >>>>> temp->delay -= task->delay; 
	mov	si, word [bp-2]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [di]
	sub	word [si], ax
L_yakc_91:
L_yakc_85:
L_yakc_83:
	; >>>>> Line:	300
	; >>>>> if(YKRdyList != 0 && YKRdyList->priority == task->priority){ 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_92
	mov	si, word [YKRdyList]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 4
	mov	al, byte [di]
	cmp	al, byte [si]
	jne	L_yakc_92
	; >>>>> Line:	301
	; >>>>> YKRdyList = YKRdyList->next; 
	mov	si, word [YKRdyList]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
L_yakc_92:
	mov	sp, bp
	pop	bp
	ret
L_yakc_80:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_81
	ALIGN	2
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	48 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKISRDepth:
	TIMES	2 db 0
activeTasks:
	TIMES	2 db 0
runningTask:
	TIMES	2 db 0
IStk:
	TIMES	510 db 0
; Filename: yaks.s 
; Dayton Minor
; Jared Moore
; Lab4a
;


; initStack initialized stack for new tasks 
; param1 ip bp + 4
; param2 sp bp + 6
;
; stack should look like this when we are done:
; ax = 0
; bx = 0
; cx = 0
; dx = 0
; si = 0
; di = 0
; ds = 0
; es = 0
; ------
; bp = param4 = bp + 8
; ip = param2 = bp + 4
; cs = param1 = bp + 2
; flags = 0000 0010 0000 0000 = 0x0200  
; flags are: {15,14,13,12,11(OF),10(DF),9(IF),8(TF),7(SF),6(ZF),5,4(AF),3,2(PF),1,0(CF)}
initStack:
	push bp					;
	mov bp,sp				;
	push bx					;
	push cx					;
	push dx					;
	mov ax, 0x0				; 
	mov bx, word[bp + 6]			; Store TCB sp in bx
	mov cx, word[bp + 4]			; store ip in cx
	mov dx, 0x0200				; Store flags in dx
	mov bp, sp
	mov sp, bx				; Change stack pointer to TCB stack
	push dx					; Push flags
	push ax					; Push cs
	push cx					; Push ip
	push bx					; Push bp
	push ax					; Push 0 onto stack 8 times
	push ax					; 2
	push ax					; 3
	push ax					; 4
	push ax					; 5
	push ax					; 6
	push ax					; 7
	push ax					; 8  Everything is good to this point
	mov ax,sp				; Save new sp
	mov sp,bp				; Restore stack pointer
	pop dx					; Restore bx - dx, bp
	pop cx
	pop bx
	pop bp					;
	ret						; Return

dispatchTask:
	push bp			;
	mov bp,sp		;
	mov sp, word[bp+4]	;
	pop ax			;
	pop bx			;
	pop cx			;
	pop dx			;
	pop si			;
	pop di			;
	pop ds			;
	pop es			;
	pop bp			;
	iret			; Return
		 
	 
	
YKEnterMutex:
	push bp
	mov bp, sp
	cli
	mov sp, bp
	pop bp
	ret

YKExitMutex:
	push bp
	mov bp, sp
	sti
	mov sp, bp
	pop bp
	ret
	
YKEnterISR:
	inc word[YKISRDepth]
	ret
YKExitISR:
	dec word[YKISRDepth]
	cmp word[YKISRDepth], 0
	je YKScheduler
	ret
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab4c_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab4c_app_2:
	DB	"Starting kernel...",0xA,0
L_lab4c_app_1:
	DB	"Creating task...",0xA,0
	ALIGN	2
main:
	; >>>>> Line:	17
	; >>>>> { 
	jmp	L_lab4c_app_3
L_lab4c_app_4:
	; >>>>> Line:	18
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	20
	; >>>>> printString("Creating task...\n"); 
	mov	ax, L_lab4c_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> YKNewTask(Task, (void 
	xor	al, al
	push	ax
	mov	ax, (TaskStack+512)
	push	ax
	mov	ax, Task
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	23
	; >>>>> printString("Starting kernel...\n"); 
	mov	ax, L_lab4c_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab4c_app_3:
	push	bp
	mov	bp, sp
	jmp	L_lab4c_app_4
L_lab4c_app_9:
	DB	" context switches! YKIdleCount is ",0
L_lab4c_app_8:
	DB	"Task running after ",0
L_lab4c_app_7:
	DB	"Delaying task...",0xA,0
L_lab4c_app_6:
	DB	"Task started.",0xA,0
	ALIGN	2
Task:
	; >>>>> Line:	28
	; >>>>> { 
	jmp	L_lab4c_app_10
L_lab4c_app_11:
	; >>>>> Line:	32
	; >>>>> printString("Task started.\n"); 
	mov	ax, L_lab4c_app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> while (1) 
	jmp	L_lab4c_app_13
L_lab4c_app_12:
	; >>>>> Line:	35
	; >>>>> printString("Delaying task...\n"); 
	mov	ax, L_lab4c_app_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	39
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	40
	; >>>>> numCtxSwitches = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	41
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-2], ax
	; >>>>> Line:	42
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	43
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	45
	; >>>>> printString("Task running after "); 
	mov	ax, L_lab4c_app_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printUInt(numCtxSwitches); 
	push	word [bp-4]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	47
	; >>>>>  
	mov	ax, L_lab4c_app_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> printUInt(idleCount); 
	push	word [bp-2]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> printString(".\n"); 
	mov	ax, (L_lab4c_app_1+15)
	push	ax
	call	printString
	add	sp, 2
L_lab4c_app_13:
	jmp	L_lab4c_app_12
L_lab4c_app_14:
	mov	sp, bp
	pop	bp
	ret
L_lab4c_app_10:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_lab4c_app_11
	ALIGN	2
TaskStack:
	TIMES	512 db 0
